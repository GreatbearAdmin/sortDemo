#pragma once
typedef char TreeEleType;

/************************************************************************/
/* 二叉树                                                                     */
/************************************************************************/
typedef struct _binode
{
	TreeEleType data;
	struct _binode* lChild; //左孩子
	struct _binode* rChild; //右孩子
}BiNode, *BiTree;


void createBiTree(BiTree &t);

void destroyBiTree(BiTree &t);

/************************************************************************/
/* 前序遍历                                                                     */
/************************************************************************/
void preOrderTraverse(BiTree t);

/************************************************************************/
/* 中序遍历                                                                     */
/************************************************************************/
void inOrderTraverse(BiTree t);

/************************************************************************/
/* 后序遍历                                                                     */
/************************************************************************/
void postOrderTraverse(BiTree t);

/************************************************************************/
/* 线索二叉树                                                                     */
/************************************************************************/
typedef enum
{
	Link = 0, //表示指向左右孩子的指针
	Thread, //表示指向前驱或后继的线索
}PointerTag;

typedef struct _bithrnode
{
	TreeEleType data;
	struct _bithrnode *lChild, *rChild;
	PointerTag lTag, rTag;
}BiThrNode, *BiThrTree;

/************************************************************************/
/* 中序遍历线索化                                                                     */
/************************************************************************/
void inThreadingTree(BiThrTree t, BiThrTree pre = nullptr);